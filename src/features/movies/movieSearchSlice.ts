import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import axios from "axios";

const key = "cf86d2e4ab2f4b0b5565c10e478cf8ed";

export interface MovieSearchState {
  movie: {
    id: string;
    genres: [{ name: string }];
    homepage: string;
    poster_path: string;
    original_title: string;
    overview: string;
    release_date: string;
    runtime: number;
    vote_average: number;
  };
  cast: [
    {
      id: number;
      name: string;
      original_name: string;
      popularity: number;
      profile_path: string;
      cast_id: number;
      character: string;
      credit_id: string;
      order: number;
    }
  ];
  actor: {
    biography: string;
    birthday: string;
    deathday: string | null;
    homepage: string;
    id: number;
    name: string;
    place_of_birth: string;
    popularity: number;
    profile_path: string;
  };
  recommendations: [];
  moviesWithActor: [];
  status: "idle" | "loading" | "failed";
}

const initialState: MovieSearchState = {
  movie: {
    id: "",
    genres: [{ name: "" }],
    homepage: "",
    poster_path: "",
    original_title: "",
    overview: "",
    release_date: "",
    runtime: 0,
    vote_average: 0,
  },
  cast: [
    {
      id: 0,
      name: "",
      original_name: "",
      popularity: 0,
      profile_path: "",
      cast_id: 0,
      character: "",
      credit_id: "",
      order: 0,
    },
  ],
  actor: {
    biography: "",
    birthday: "",
    deathday: "",
    homepage: "",
    id: 0,
    name: "",
    place_of_birth: "",
    popularity: 0,
    profile_path: "",
  },
  recommendations: [],
  moviesWithActor: [],
  status: "idle",
};

export const findMovieDetail = createAsyncThunk(
  "movieSearch/fetchMovieDetail",
  async (id: string | undefined) => {
    const response = await axios.get(
      `https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=en-US`
    );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const findMovieCast = createAsyncThunk(
  "movieSearch/fetchMovieCast",
  async (id: string | undefined) => {
    const response = await axios.get(
      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${key}`
    );
    // The value we return becomes the `fulfilled` action payload
    return response.data.cast;
  }
);

export const findCastDetail = createAsyncThunk(
  "movieSearch/fetchCastDetail",
  async (id: string | undefined) => {
    const response = await axios.get(
      `https://api.themoviedb.org/3/person/${id}?api_key=${key}&language=en-US`
    );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const findMoviesByActor = createAsyncThunk(
  "movieSearch/fetchMoviesByActor",
  async (id: string | undefined) => {
    const response = await axios.get(
      `https://api.themoviedb.org/3/person/${id}/movie_credits?api_key=${key}&language=en-US`
    );
    // The value we return becomes the `fulfilled` action payload
    return response.data.cast;
  }
);

export const findRecommendedMovies = createAsyncThunk(
  "movieSearch/fetchRecommendedMovies",
  async (id: string | undefined) => {
    const response = await axios.get(
      `https://api.themoviedb.org/3/movie/${id}/similar?api_key=${key}&language=en-US&page=1`
    );
    // The value we return becomes the `fulfilled` action payload
    return response.data.results;
  }
);

export const movieSearchSlice = createSlice({
  name: "movieSearch",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<[]>) => {
      state.moviesWithActor = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(findMovieDetail.pending, (state) => {
        state.status = "loading";
      })
      .addCase(findMovieDetail.fulfilled, (state, action) => {
        state.status = "idle";
        state.movie = action.payload;
      })
      .addCase(findMovieDetail.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(findMovieCast.pending, (state) => {
        state.status = "loading";
      })
      .addCase(findMovieCast.fulfilled, (state, action) => {
        state.status = "idle";
        state.cast = action.payload;
      })
      .addCase(findMovieCast.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(findCastDetail.pending, (state) => {
        state.status = "loading";
      })
      .addCase(findCastDetail.fulfilled, (state, action) => {
        state.status = "idle";
        state.actor = action.payload;
      })
      .addCase(findCastDetail.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(findMoviesByActor.pending, (state) => {
        state.status = "loading";
      })
      .addCase(findMoviesByActor.fulfilled, (state, action) => {
        state.status = "idle";
        state.moviesWithActor = action.payload;
      })
      .addCase(findMoviesByActor.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(findRecommendedMovies.pending, (state) => {
        state.status = "loading";
      })
      .addCase(findRecommendedMovies.fulfilled, (state, action) => {
        state.status = "idle";
        state.recommendations = action.payload;
      })
      .addCase(findRecommendedMovies.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMovie = (state: RootState) => state.movieSearch;

export const { incrementByAmount } = movieSearchSlice.actions;

export default movieSearchSlice.reducer;
